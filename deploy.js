const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
    //HTTP://127.0.0.1:8545
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
    const wallet = new ethers.Wallet(
        process.env.PRIVATE_KEY,
        provider
    );

    /* create a wallet from encrypted private key */
    // const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf-8");
    // let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    //     encryptedJson,
    //     process.env.PRIVATE_KEY_PASSWORD
    // );
    // wallet = await wallet.connect(provider);

    const abi = fs.readFileSync("./BasicStorage_sol_BasicStorage.abi", "utf-8");
    const binary = fs.readFileSync("./BasicStorage_sol_BasicStorage.bin", "utf-8");

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    console.log("Deploying, please wait...");
    const contract = await contractFactory.deploy();
    const transactionReceipt = await contract.deployTransaction.wait(1);
    console.log("Contract address: " + contract.address);
    console.log("This is the transaction receipt after waiting for 1 block confirmation..")
    console.log(transactionReceipt);
    console.log("This is the deployment transaction (transaction response - which you initially get)..");
    console.log(contract.deployTransaction);

    // console.log("deploy only with transaction data!");
    // const nonce = await wallet.getTransactionCount();
    // const tx = {
    //     nonce: nonce,
    //     gasPrice: 20000000000,
    //     gasLimit: 1000000,
    //     to: null,
    //     value: 0,
    //     data: "0x60806040526040518060400160405280600281526020016040518060400160405280600581526020017f53616a6c69000000000000000000000000000000000000000000000000000000815250815250600260008201518160000155602082015181600101908051906020019061007792919061008c565b50505034801561008657600080fd5b50610190565b8280546100989061012f565b90600052602060002090601f0160209004810192826100ba5760008555610101565b82601f106100d357805160ff1916838001178555610101565b82800160010185558215610101579182015b828111156101005782518255916020019190600101906100e5565b5b50905061010e9190610112565b5090565b5b8082111561012b576000816000905550600101610113565b5090565b6000600282049050600182168061014757607f821691505b6020821081141561015b5761015a610161565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61083e8061019f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806339d515e2146100675780636057361d146100985780636f760f41146100b457806377ec2b55146100d05780638bab8dd5146100ef578063a2296fb31461011f575b600080fd5b610081600480360381019061007c919061053a565b61013d565b60405161008f929190610612565b60405180910390f35b6100b260048036038101906100ad919061053a565b6101f9565b005b6100ce60048036038101906100c991906104de565b61020c565b005b6100d861029c565b6040516100e6929190610612565b60405180910390f35b61010960048036038101906101049190610495565b610336565b60405161011691906105f7565b60405180910390f35b610127610364565b60405161013491906105f7565b60405180910390f35b6004818154811061014d57600080fd5b90600052602060002090600202016000915090508060000154908060010180546101769061070b565b80601f01602080910402602001604051908101604052809291908181526020018280546101a29061070b565b80156101ef5780601f106101c4576101008083540402835291602001916101ef565b820191906000526020600020905b8154815290600101906020018083116101d257829003601f168201915b5050505050905082565b80600081905550610208610364565b5050565b6004604051806040016040528083815260200184815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908051906020019061027292919061036d565b5050508060018360405161028691906105e0565b9081526020016040518091039020819055505050565b60028060000154908060010180546102b39061070b565b80601f01602080910402602001604051908101604052809291908181526020018280546102df9061070b565b801561032c5780601f106103015761010080835404028352916020019161032c565b820191906000526020600020905b81548152906001019060200180831161030f57829003601f168201915b5050505050905082565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60008054905090565b8280546103799061070b565b90600052602060002090601f01602090048101928261039b57600085556103e2565b82601f106103b457805160ff19168380011785556103e2565b828001600101855582156103e2579182015b828111156103e15782518255916020019190600101906103c6565b5b5090506103ef91906103f3565b5090565b5b8082111561040c5760008160009055506001016103f4565b5090565b600061042361041e84610667565b610642565b90508281526020810184848401111561043f5761043e6107d1565b5b61044a8482856106c9565b509392505050565b600082601f830112610467576104666107cc565b5b8135610477848260208601610410565b91505092915050565b60008135905061048f816107f1565b92915050565b6000602082840312156104ab576104aa6107db565b5b600082013567ffffffffffffffff8111156104c9576104c86107d6565b5b6104d584828501610452565b91505092915050565b600080604083850312156104f5576104f46107db565b5b600083013567ffffffffffffffff811115610513576105126107d6565b5b61051f85828601610452565b925050602061053085828601610480565b9150509250929050565b6000602082840312156105505761054f6107db565b5b600061055e84828501610480565b91505092915050565b600061057282610698565b61057c81856106a3565b935061058c8185602086016106d8565b610595816107e0565b840191505092915050565b60006105ab82610698565b6105b581856106b4565b93506105c58185602086016106d8565b80840191505092915050565b6105da816106bf565b82525050565b60006105ec82846105a0565b915081905092915050565b600060208201905061060c60008301846105d1565b92915050565b600060408201905061062760008301856105d1565b81810360208301526106398184610567565b90509392505050565b600061064c61065d565b9050610658828261073d565b919050565b6000604051905090565b600067ffffffffffffffff8211156106825761068161079d565b5b61068b826107e0565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156106f65780820151818401526020810190506106db565b83811115610705576000848401525b50505050565b6000600282049050600182168061072357607f821691505b602082108114156107375761073661076e565b5b50919050565b610746826107e0565b810181811067ffffffffffffffff821117156107655761076461079d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107fa816106bf565b811461080557600080fd5b5056fea26469706673582212209831d818b70a67e1f3cb1403858f3066906a699dfed8fd9498ff649f0deea78264736f6c63430008070033",
    //     chainId: 1337, //this value works, not the network id of ganache
    // };
    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log(sentTxResponse);

    // Get number
    const currentFavoriteNumber = await contract.retrive();
    console.log("Current favorite number: " + currentFavoriteNumber.toString());
    const storeTransactionResponse = await contract.store("5");
    const storeTransactionReceipt = await storeTransactionResponse.wait(1);
    const updatedFavoriteNumber = await contract.retrive();
    console.log("Updated favorite number: " + updatedFavoriteNumber);
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
});